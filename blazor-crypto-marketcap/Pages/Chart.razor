@page "/chart/{symbol}"
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Enums
@inject CoinMetricService CoinService

<h4>@Symbol.ToLower()</h4>

<p>this component demonstrates charting data from an API response</p>

@if (LineConfig == null)
{
    <p><em>loading...</em></p>
}
else
{
    <ChartJsLineChart @ref="@LineChartJs" Config="@LineConfig" Width="600" Height="300" />
}

@code {
    [Parameter]
    public string Symbol { get; set; }
    private LineConfig LineConfig { get; set; }
    private ChartJsLineChart LineChartJs { get; set; }
    private LineDataset<Point> PointDataset { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var historicalData = await CoinService.GetHistoricalChartData(Symbol);

        LineConfig = new LineConfig()
        {
            Options = new LineOptions()
            {
                Title = new OptionsTitle()
                {
                    Display = true,
                    Text = Symbol
                },
                Responsive = true,
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    },
                    yAxes = new List<CartesianAxis>()
                    {
                        new LinearCartesianAxis
                        {
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Value"
                            }
                        }
                    }
                }
            }
        };

        PointDataset = new LineDataset<Point>()
        {
            BackgroundColor = "#24374A",
            BorderWidth = 0,
            BorderColor = "#438081",
        };
        
        PointDataset.AddRange(historicalData.Data.data.Select(i => new Point(i.Time, i.Close)));
        LineConfig.Data.Datasets.Add(PointDataset);
    }
}